---
layout: post
title: Java. [String] toCharArray(), indexOf(), substring() 등  
date: 2023-02-13 15:57:00 +0900
categories: [코딩테스트, 간단이론(Java)]
tags: [Java, 간단이론, 코딩테스트]
---

> [문자 추출]
\
> .charAt(int index)

> [문자의 위치 추출]
\
> .indexOf(String str)

> [문자열 자르기]
\
> .substring(int index1, int index2)

> [문자열 → 문자배열]
\
> .toCharArray()

> [문자열로 변환]
\
> String.valueOf(값)

<br>

<!-- todo: *string*.charAt(int index) : 특정 위치 문자 리턴 -->
## 1. charAt(int index)
---
### *string***.charAt(int index)**
* String 값에서 인덱스 위치에 자리한 **문자** 반환
* (인덱스는 0부터 시작)

```java
  String str = "HelloWorld";
  str = str.charAt(0)  // 인덱스 0번째 문자를 반환 → H
```
{: file='Java'}

<span style='font-size: 0.95rem; color: #555;'>
(+)<br>
Scanner를 이용해 char 자료형 입력을 받을 때,<br>
Scanner.sc = new Scanner(System.in);<br>
char input = **sc.next().charAt(0);** 이렇게 표현<br>
→ 문자열.charAt(0) : 문자열 중 0번째 인덱스 문자 하나를 얻어옴.
</span> 

<br>

<!-- todo: indexOf(String str) : 문자열 내에서 문자열의 위치를 리턴 -->
## 2. indexOf(String str)
---
### *string***.indexOf(String str)**
* String 값에서 주어진 문자열(str)의 **인덱스 위치** 반환 
* 주어진 문자열(str)의 첫 번째 문자가 기준.
* 없으면 -1을 반환
* (인덱스는 0부터 시작)

```java
  String str = "HelloWorld";
  System.out.println(str.indexOf("World")); // 5
  System.out.println(str.indexOf("a")); // -1 (없는 문자)
```
{: file='Java'}

<br>


<!-- todo: substring(int beginindex) : beginindex위치에서 끝까지 잘라낸 새로운 문자열을 리턴 -->
<!-- todo: substring(int beginindex, int endindex) -->
## 3. substring(int index1, int index2)
---
### *string***.substring(int index1, int index2)**
* String 값에서 인덱스 값으로 문자 자르기
* 위치가 index1 부터 index2 <u><b>전까지</b></u>의 문자열을 잘라낸다.

|  str  | H | e | l | l | o | W | o | r | l | d |
|:------|:--|:--|:--|:--|:--|:--|:--|:--|:--|:--|
| index | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |


```java
  String str = "HelloWorld";
  System.out.println(str.substring(2, 5)); // llo
  // 인덱스 5인 W의 "전까지" 잘라낸다.
```
{: file='Java'}

* index를 하나만 쓴다면, index 자릿수부터 **문자열의 끝까지** 잘라냄.

```java
  String str = "HelloWorld";
  System.out.println(str.substring(5)); // World
```
{: file='Java'}

<br>

<!-- todo: 문자열을 분리시켜서 문자 배열 생성 toCharArray()-->
## 4. toCharArray()
---
### *string***.toCharArray()**
* 문자열(String)을 분리하여 문자(char) 배열 생성
```java
  String str = "HelloWorld";
  char[] c = str.toCharArray();  
  System.out.println(Arrays.toString(c));
  // [H, e, l, l, o, W, o, r, l, d]
```
{: file='Java'}

<br>


<!-- todo: String.valueOf() : toCharArray()로 나눈 문자배열을 String화 시켜줌 -->
## 5. valueOf() 
---
### **String.valueOf()**
* 기본 타입값을 문자열로 반환
  * String.valueOf(int i) : int형의 값을 문자열로 반환
  * String.valueOf(double d) : double형의 값을 문자열로 반환
  * **String.valueOf(char[] c)** : toCharArray()로 분리한 문자 배열을 다시 String으로.

```java
  String str = "HelloWorld";
  char[] c = str.toCharArray();  // [H, e, l, l, o, W, o, r, l, d]
  System.out.println(Arrays.toString(c)); // HelloWorld
```
{: file='Java'}

<br>

## [+]
## spilt()
---
### *string***.split(String regex)**
* 구분자를 기준으로, 문자열을 배열 형식으로 자르는 함수

```java
  String str = "Hello World";
  String[] arr = str.split(" ");  // 공백을 기준으로 자르기
  System.out.println(Arrays.toString(arr)); // [Hello, World]
```
{: file='Java'}

* 배열로 저장되었기 때문에 배열 인덱스를 이용하여 각각의 값을 가져올 수 있다.

```java
  String str = "Hello-World";
  String arr1 = str.split("-")[1];  // '-'를 기준으로 자른 배열의 인덱스 1의 값
  System.out.println(arr1); // World
```
{: file='Java'}

### *string***.split(String regex, int limit)**
* 구분자를 기준으로, limit만큼의 배열을 반환

```java
  String str = "Hello World Bye"; // Hello 앞에 공백 추가

  String[] arr2 = str.split(" ", 2);  // 공백을 기준으로 2개의 배열을 반환
  System.out.println(Arrays.toString(arr2)); // [Hello, World Bye]

  String[] arr3 = str.split(" ", 3);  // 공백을 기준으로 3개의 배열을 반환
  System.out.println(Arrays.toString(arr3)); // [Hello, World, Bye]
```
{: file='Java'}